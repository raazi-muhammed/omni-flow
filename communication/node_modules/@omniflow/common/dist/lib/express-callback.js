"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCallback = void 0;
const adapt_request_js_1 = require("./adapt-request.js");
const error_handler_js_1 = require("./error-handler.js");
const logger_js_1 = require("./logger.js");
function makeCallback(controller) {
    return (req, res) => __awaiter(this, void 0, void 0, function* () {
        const httpRequest = (0, adapt_request_js_1.adaptRequest)(req);
        try {
            const response = (yield controller(httpRequest));
            res.status(response.statusCode).header(response.headers).json({
                success: true,
                message: response.message,
                data: response.data,
            });
        }
        catch (error) {
            logger_js_1.logger.error("Error caught by make callback:", error);
            if (error instanceof error_handler_js_1.ErrorHandler) {
                res.status(error.statusCode).json({
                    success: false,
                    message: error.message || "Internal server error",
                });
            }
            else {
                res.status(500).json({
                    success: false,
                    message: "Internal server error",
                });
            }
        }
    });
}
exports.makeCallback = makeCallback;
