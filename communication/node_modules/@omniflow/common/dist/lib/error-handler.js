"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectUnauthorizedError = exports.UserUnauthorizedError = exports.UnauthorizedError = exports.ProjectNotFoundError = exports.UserNotFoundError = exports.NotFoundError = exports.AnErrorOccurredError = exports.InternalServerError = exports.ConflictError = exports.BadRequestError = exports.ErrorHandler = void 0;
class ErrorHandler extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}
exports.ErrorHandler = ErrorHandler;
class BadRequestError extends ErrorHandler {
    constructor(message = "Bad request") {
        super(message, 400);
    }
}
exports.BadRequestError = BadRequestError;
class ConflictError extends ErrorHandler {
    constructor(message = "Conflict error") {
        super(message, 409);
    }
}
exports.ConflictError = ConflictError;
class InternalServerError extends ErrorHandler {
    constructor(message = "Internal Server Error") {
        super(message, 500);
    }
}
exports.InternalServerError = InternalServerError;
class AnErrorOccurredError extends ErrorHandler {
    constructor(message = "An error occurred") {
        super(message, 500);
    }
}
exports.AnErrorOccurredError = AnErrorOccurredError;
class NotFoundError extends ErrorHandler {
    constructor(message = "Not found") {
        super(message, 404);
    }
}
exports.NotFoundError = NotFoundError;
class UserNotFoundError extends ErrorHandler {
    constructor(message = "User not found") {
        super(message, 404);
    }
}
exports.UserNotFoundError = UserNotFoundError;
class ProjectNotFoundError extends ErrorHandler {
    constructor(message = "Project not found") {
        super(message, 404);
    }
}
exports.ProjectNotFoundError = ProjectNotFoundError;
class UnauthorizedError extends ErrorHandler {
    constructor(message = "Unauthorized") {
        super(message, 401);
    }
}
exports.UnauthorizedError = UnauthorizedError;
class UserUnauthorizedError extends ErrorHandler {
    constructor(message = "User not Unauthorized") {
        super(message, 401);
    }
}
exports.UserUnauthorizedError = UserUnauthorizedError;
class ProjectUnauthorizedError extends ErrorHandler {
    constructor(message = "Project not Unauthorized") {
        super(message, 401);
    }
}
exports.ProjectUnauthorizedError = ProjectUnauthorizedError;
