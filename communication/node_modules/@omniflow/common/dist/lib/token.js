"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.token = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const ACCESS_TOKEN_SECRET = process.env.ACCESS_TOKEN_SECRET;
function sign(data) {
    if (!ACCESS_TOKEN_SECRET)
        throw new Error("No salt found for jwt");
    const jsonData = JSON.parse(JSON.stringify(data));
    return jsonwebtoken_1.default.sign(jsonData, ACCESS_TOKEN_SECRET);
}
function verify(token) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!ACCESS_TOKEN_SECRET)
            throw new Error("No salt found for jwt");
        const tokenData = token.split(" ")[1];
        return new Promise((resolve) => {
            jsonwebtoken_1.default.verify(tokenData, ACCESS_TOKEN_SECRET, (err, user) => {
                if (err)
                    resolve(null);
                else
                    resolve(user);
            });
        });
    });
}
function validate(auth) {
    if (!auth)
        throw new Error("No token found");
    const token = auth.split(" ")[1];
    if (!token)
        throw new Error("Invalid token");
    return true;
}
exports.token = Object.freeze({
    sign,
    verify,
    validate,
});
